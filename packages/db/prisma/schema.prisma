// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id Int @unique @id @default(autoincrement())
  name String?
  email String? @unique
  number String? @unique
  password String 
  OnRanmpTransaction onRampTransaction[]
  Balance Balance[]
  sended P2pTrancaction[] @relation(name: "senderRelation")
  received P2pTrancaction[] @relation(name: "receiverRelation")
}

model P2pTrancaction{
  id Int @id @default(autoincrement())
  amount Int
  date DateTime
  senderId Int
  ReceiverId Int
  Sender User @relation(name: "senderRelation", fields: [senderId], references: [id])
  Receiver User @relation(name: "receiverRelation", fields: [ReceiverId], references: [id])
}

model Merchant{
  id Int @id @unique @default(autoincrement())
  email String @unique
  name String
  authtype Authtype
}

model onRampTransaction{
  id Int @id @default(autoincrement())
  status onRanmpStatus
  token String @unique
  provider String
  amount Int
  starttime DateTime
  userId Int
  user User @relation(fields: [userId], references: [id])
}

model Balance{
  id Int @id @default(autoincrement())
  userId Int @unique
  amount Int
  locked Int
  user User @relation(fields: [userId], references: [id])
}

enum Authtype {
  Google
  Github
}

enum onRanmpStatus {
  success
  failure
  processing
}

